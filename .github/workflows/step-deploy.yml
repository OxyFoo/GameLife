name: '🧩 Server deploy'

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to archive & deploy (dev, test or prod)'
        required: true
        type: string
      actions:
        description: 'Choose actions to do (deploy, migration or both)'
        required: false
        type: string
        default: 'both'

env:
  FTP_HOST: ${{ inputs.environment == 'prod' && secrets.FTP_PROD_HOST || inputs.environment == 'test' && secrets.FTP_TEST_HOST || secrets.FTP_DEV_HOST }}
  FTP_USER: ${{ inputs.environment == 'prod' && secrets.FTP_PROD_USER || inputs.environment == 'test' && secrets.FTP_TEST_USER || secrets.FTP_DEV_USER }}
  FTP_PASS: ${{ inputs.environment == 'prod' && secrets.FTP_PROD_PASS || inputs.environment == 'test' && secrets.FTP_TEST_PASS || secrets.FTP_DEV_PASS }}

jobs:
  enable-maintenance:
    name: '🚧 Enable Maintenance'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Enable maintenance mode - dev'
        if: inputs.environment == 'dev'
        run: |
          php ./Tools/Maintenance/setMaintenance.php \
            '${{ vars.DB_DEV_HOST }}' \
            '${{ vars.DB_DEV_USER }}' \
            '${{ secrets.DB_DEV_PASS }}' \
            '${{ vars.DB_DEV_NAME }}' \
            1

      - name: 'Enable maintenance mode - test'
        if: inputs.environment == 'test'
        run: |
          php ./Tools/Maintenance/setMaintenance.php \
            '${{ vars.DB_TEST_HOST }}' \
            '${{ vars.DB_TEST_USER }}' \
            '${{ secrets.DB_TEST_PASS }}' \
            '${{ vars.DB_TEST_NAME }}' \
            1

      - name: 'Enable maintenance mode - prod'
        if: inputs.environment == 'prod'
        run: |
          php ./Tools/Maintenance/setMaintenance.php \
            '${{ vars.DB_PROD_HOST }}' \
            '${{ vars.DB_PROD_USER }}' \
            '${{ secrets.DB_PROD_PASS }}' \
            '${{ vars.DB_PROD_NAME }}' \
            1

  archive:
    name: '📦 Archive'
    runs-on: ubuntu-latest
    needs: enable-maintenance
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install FTP client'
        run: sudo apt-get update && sudo apt-get install php php-mysqli lftp tar -y

      - name: 'Archive code'
        run: |
          # Define ARCHIVE env
          echo "ARCHIVE_SERVER=./archive_server_$(date +'%Y-%m-%d_%H-%M-%S').tar.gz" >> $GITHUB_ENV
          echo "ARCHIVE_DATABASE_STRUCT=./archive_database_structure_$(date +'%Y-%m-%d_%H-%M-%S').sql" >> $GITHUB_ENV
          echo "ARCHIVE_DATABASE_DATA=./archive_database_data_$(date +'%Y-%m-%d_%H-%M-%S').sql" >> $GITHUB_ENV

          # Create temporary directores
          mkdir -p ftp_backup

      - name: 'Download files from FTP server'
        run: lftp -c "set ftp:ssl-allow true; set ssl:verify-certificate no;
              open -u '${{ env.FTP_USER }}','${{ env.FTP_PASS }}' '${{ env.FTP_HOST }}';
              mirror --exclude=backups/ / ftp_backup/"

      - name: 'Archive downloaded files'
        run: tar -czf $ARCHIVE_SERVER -C ftp_backup .

      - name: 'Upload archive to FTP server'
        run: lftp -c "set ftp:ssl-allow true; set ssl:verify-certificate no;
              open -u '${{ env.FTP_USER }}','${{ env.FTP_PASS }}' '${{ env.FTP_HOST }}';
              put -O ./backups/ $ARCHIVE_SERVER"

      - name: 'Get database archive - dev'
        if: inputs.environment == 'dev'
        run: |
          php ./Tools/TableFusion/backup.php \
            '${{ vars.DB_DEV_HOST }}' \
            '${{ vars.DB_DEV_USER }}' \
            '${{ secrets.DB_DEV_PASS }}' \
            '${{ vars.DB_DEV_NAME }}' \
            '${{ env.ARCHIVE_DATABASE_STRUCT }}' \
            '${{ env.ARCHIVE_DATABASE_DATA }}'

      - name: 'Get database archive - test'
        if: inputs.environment == 'test'
        run: |
          php ./Tools/TableFusion/backup.php \
            '${{ vars.DB_TEST_HOST }}' \
            '${{ vars.DB_TEST_USER }}' \
            '${{ secrets.DB_TEST_PASS }}' \
            '${{ vars.DB_TEST_NAME }}' \
            '${{ env.ARCHIVE_DATABASE_STRUCT }}' \
            '${{ env.ARCHIVE_DATABASE_DATA }}'

      - name: 'Get database archive - prod'
        if: inputs.environment == 'prod'
        run: |
          php ./Tools/TableFusion/backup.php \
            '${{ vars.DB_PROD_HOST }}' \
            '${{ vars.DB_PROD_USER }}' \
            '${{ secrets.DB_PROD_PASS }}' \
            '${{ vars.DB_PROD_NAME }}' \
            '${{ env.ARCHIVE_DATABASE_STRUCT }}' \
            '${{ env.ARCHIVE_DATABASE_DATA }}'

      - name: 'Upload database archive to FTP server'
        run: lftp -c "set ftp:ssl-allow true; set ssl:verify-certificate no;
              open -u '${{ env.FTP_USER }}','${{ env.FTP_PASS }}' '${{ env.FTP_HOST }}';
              put -O ./backups/ '$ARCHIVE_DATABASE_STRUCT';
              put -O ./backups/ '$ARCHIVE_DATABASE_DATA'"

  deploy-http:
    name: '🔁 Server update'
    runs-on: ubuntu-latest
    if: inputs.actions == 'both' || inputs.actions == 'deploy'
    needs: archive
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install FTP client'
        run: sudo apt-get update && sudo apt-get install lftp -y

      - name: 'Install PHP config file'
        env:
          SERVER_CONFIG_PHP_B64: ${{ inputs.environment == 'prod' && secrets.SERVER_PROD_CONFIG_PHP_BASE64 || inputs.environment == 'test' && secrets.SERVER_TEST_CONFIG_PHP_BASE64 || secrets.SERVER_DEV_CONFIG_PHP_BASE64 }}
        run: echo $SERVER_CONFIG_PHP_B64 | base64 -d > ./src/Server/HTTP/src/config.php

      - name: 'Upload files to FTP server'
        run: lftp -c "set ftp:ssl-allow true; set ssl:verify-certificate no;
              open -u '${{ env.FTP_USER }}','${{ env.FTP_PASS }}' '${{ env.FTP_HOST }}';
              mirror --reverse --delete --exclude backups/ ./src/Server/HTTP/ /"

  deploy-tcp:
    name: '🔄 Update TCP'
    runs-on: ubuntu-latest
    if: inputs.actions == 'both' || inputs.actions == 'deploy'
    needs: archive
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Install dependencies'
        run: |
          cd ./src/Server/TCP/
          npm install

      - name: 'Add config file - Dev'
        if: inputs.environment == 'dev'
        env:
          ENV_FILE: ./src/Server/TCP/.env
        run: |
          echo "LISTEN_PORT=\"${{ vars.TCP_PORT_DEV }}\"" >> $ENV_FILE
          echo "SERVER_URL=\"${{ vars.TCP_URL_DEV }}\"" >> $ENV_FILE
          echo "OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY_TEST }}\"" >> $ENV_FILE
          echo "DB_HOSTNAME=\"${{ vars.DB_DEV_HOST }}\"" >> $ENV_FILE
          echo "DB_DATABASE=\"${{ vars.DB_DEV_NAME }}\"" >> $ENV_FILE
          echo "DB_USERNAME=\"${{ vars.DB_DEV_USER }}\"" >> $ENV_FILE
          echo "DB_PASSWORD=\"${{ secrets.DB_DEV_PASS }}\"" >> $ENV_FILE

      - name: 'Add config file - Test'
        if: inputs.environment == 'test'
        env:
          ENV_FILE: ./src/Server/TCP/.env
        run: |
          echo "LISTEN_PORT=\"${{ vars.TCP_PORT_TEST }}\"" >> $ENV_FILE
          echo "SERVER_URL=\"${{ vars.TCP_URL_TEST }}\"" >> $ENV_FILE
          echo "OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY_TEST }}\"" >> $ENV_FILE
          echo "DB_HOSTNAME=\"${{ vars.DB_TEST_HOST }}\"" >> $ENV_FILE
          echo "DB_DATABASE=\"${{ vars.DB_TEST_NAME }}\"" >> $ENV_FILE
          echo "DB_USERNAME=\"${{ vars.DB_TEST_USER }}\"" >> $ENV_FILE
          echo "DB_PASSWORD=\"${{ secrets.DB_TEST_PASS }}\"" >> $ENV_FILE

      - name: 'Add config file - Prod'
        if: inputs.environment == 'prod'
        env:
          ENV_FILE: ./src/Server/TCP/.env
        run: |
          echo "LISTEN_PORT=\"${{ vars.TCP_PORT_PROD }}\"" >> $ENV_FILE
          echo "SERVER_URL=\"${{ vars.TCP_URL_PROD }}\"" >> $ENV_FILE
          echo "OPENAI_API_KEY=\"${{ secrets.OPENAI_API_KEY_PROD }}\"" >> $ENV_FILE
          echo "DB_HOSTNAME=\"${{ vars.DB_PROD_HOST }}\"" >> $ENV_FILE
          echo "DB_DATABASE=\"${{ vars.DB_PROD_NAME }}\"" >> $ENV_FILE
          echo "DB_USERNAME=\"${{ vars.DB_PROD_USER }}\"" >> $ENV_FILE
          echo "DB_PASSWORD=\"${{ secrets.DB_PROD_PASS }}\"" >> $ENV_FILE

      - name: 'Deploy to Server - Test'
        if: inputs.environment == 'test'
        uses: easingthemes/ssh-deploy@main
        with:
          SOURCE: ./
          TARGET: ./Test/GameLife/
          ARGS: "-rlgoDzvc -i --delete"
          REMOTE_HOST: ${{ vars.VPS_HOST }}
          REMOTE_USER: ${{ vars.VPS_USER }}
          REMOTE_PORT: ${{ vars.VPS_PORT }}
          SSH_PRIVATE_KEY: ${{ secrets.VPS_PRIVATE_KEY }}

      - name: 'Deploy to Server - Prod'
        if: inputs.environment == 'prod'
        uses: easingthemes/ssh-deploy@main
        with:
          SOURCE: ./
          TARGET: ./Prod/GameLife/
          ARGS: "-rlgoDzvc -i --delete"
          REMOTE_HOST: ${{ vars.VPS_HOST }}
          REMOTE_USER: ${{ vars.VPS_USER }}
          REMOTE_PORT: ${{ vars.VPS_PORT }}
          SSH_PRIVATE_KEY: ${{ secrets.VPS_PRIVATE_KEY }}

      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Start Bot'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ vars.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ vars.VPS_PORT }}
          script: sudo systemctl restart oxyfoo-gamelife-tcp-${{ inputs.environment }}.service

  migration:
    name: '🚚 Database migration'
    runs-on: ubuntu-latest
    if: inputs.actions == 'both' || inputs.actions == 'migration'
    needs: archive
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Run migration - test'
        if: inputs.environment == 'test'
        run: |
          php ./Tools/TableFusion/index.php \
          '${{ vars.DB_DEV_HOST }}' \
          '${{ vars.DB_DEV_USER }}' \
          '${{ secrets.DB_DEV_PASS }}' \
          '${{ vars.DB_DEV_NAME }}' \
          '${{ vars.DB_TEST_HOST }}' \
          '${{ vars.DB_TEST_USER }}' \
          '${{ secrets.DB_TEST_PASS }}' \
          '${{ vars.DB_TEST_NAME }}' \
          --no-confirm

      - name: 'Run migration - prod'
        if: inputs.environment == 'prod'
        run: |
          php ./Tools/TableFusion/index.php \
          '${{ vars.DB_TEST_HOST }}' \
          '${{ vars.DB_TEST_USER }}' \
          '${{ secrets.DB_TEST_PASS }}' \
          '${{ vars.DB_TEST_NAME }}' \
          '${{ vars.DB_PROD_HOST }}' \
          '${{ vars.DB_PROD_USER }}' \
          '${{ secrets.DB_PROD_PASS }}' \
          '${{ vars.DB_PROD_NAME }}' \
          --no-confirm

  disable-maintenance:
    name: '🚧 Disable Maintenance'
    runs-on: ubuntu-latest
    needs: [ deploy-http, deploy-tcp, migration ]
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Disable maintenance mode - dev'
        run: |
          php ./Tools/Maintenance/setMaintenance.php \
            '${{ vars.DB_DEV_HOST }}' \
            '${{ vars.DB_DEV_USER }}' \
            '${{ secrets.DB_DEV_PASS }}' \
            '${{ vars.DB_DEV_NAME }}' \
            0

      - name: 'Disable maintenance mode - test'
        run: |
          php ./Tools/Maintenance/setMaintenance.php \
            '${{ vars.DB_TEST_HOST }}' \
            '${{ vars.DB_TEST_USER }}' \
            '${{ secrets.DB_TEST_PASS }}' \
            '${{ vars.DB_TEST_NAME }}' \
            0

      - name: 'Disable maintenance mode - prod'
        run: |
          php ./Tools/Maintenance/setMaintenance.php \
            '${{ vars.DB_PROD_HOST }}' \
            '${{ vars.DB_PROD_USER }}' \
            '${{ secrets.DB_PROD_PASS }}' \
            '${{ vars.DB_PROD_NAME }}' \
            0
