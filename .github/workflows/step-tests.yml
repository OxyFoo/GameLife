name: 'üîç All tests'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        type: choice
        default: 'prod'
        options:
          - dev
          - test
          - prod
      test-client:
        description: 'Run client tests'
        required: false
        type: boolean
        default: true
      test-database:
        description: 'Run database ressources tests'
        required: false
        type: boolean
        default: true
      test-migration:
        description: 'Run database migration tests'
        required: false
        type: boolean
        default: true
  workflow_call:
    inputs:
      environment:
        description: 'Environment to test (dev, test or prod)'
        required: true
        type: string
        default: 'dev'
      test-client:
        description: 'Run client tests'
        required: false
        type: boolean
        default: true
      test-database:
        description: 'Run database ressources tests'
        required: false
        type: boolean
        default: true
      test-migration:
        description: 'Run database migration tests'
        required: false
        type: boolean
        default: true

jobs:
  tester-testing-test:
    name: 'Print inputs'
    runs-on: ubuntu-latest
    steps:
      - name: 'Print inputs'
        run: |
          echo "environment: ${{ github.event.inputs.environment }}"
          echo "test-client: ${{ github.event.inputs.test-client }}"
          echo "test-database: ${{ github.event.inputs.test-database }}"
          echo "test-migration: ${{ github.event.inputs.test-migration }}"
          echo "workflow_call: ${{ github.event.workflow_call }}"
          echo "workflow_dispatch: ${{ github.event.workflow_dispatch }}"
          echo "github: ${{ github }}"

  test-client:
    name: 'üîç Client tests'
    if: ${{ github.event.inputs.test-client }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: 'Cache NPM packages'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: 'Install Dependencies'
        run: npm install

      - name: 'Run tests'
        env:
          ENVFILE: .env.test
        run: npm test

      - name: 'Run ressource tests'
        run: cd Tools/RessourcesChecker/ && python3 main.py

  test-database:
    name: 'üîç Database ressources tests'
    if: ${{ github.event.inputs.test-database }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Run skills tests - dev'
        if: ${{ github.event.inputs.environment == 'dev' }}
        env:
          DB_HOST: ${{ vars.DB_DEV_HOST }}
          DB_USER: ${{ vars.DB_DEV_USER }}
          DB_PASS: ${{ secrets.DB_DEV_PASS }}
          DB_NAME: ${{ vars.DB_DEV_NAME }}
        run: |
          php ./Tools/RessourcesChecker/skills.php $DB_HOST $DB_USER $DB_PASS $DB_NAME

      - name: 'Run skills tests - test'
        if: ${{ github.event.inputs.environment == 'test' }}
        env:
          DB_HOST: ${{ vars.DB_TEST_HOST }}
          DB_USER: ${{ vars.DB_TEST_USER }}
          DB_PASS: ${{ secrets.DB_TEST_PASS }}
          DB_NAME: ${{ vars.DB_TEST_NAME }}
        run: |
          php ./Tools/RessourcesChecker/skills.php $DB_HOST $DB_USER $DB_PASS $DB_NAME

      - name: 'Run skills tests - prod'
        if: ${{ github.event.inputs.environment == 'prod' }}
        env:
          DB_HOST: ${{ vars.DB_PROD_HOST }}
          DB_USER: ${{ vars.DB_PROD_USER }}
          DB_PASS: ${{ secrets.DB_PROD_PASS }}
          DB_NAME: ${{ vars.DB_PROD_NAME }}
        run: |
          php ./Tools/RessourcesChecker/skills.php $DB_HOST $DB_USER $DB_PASS $DB_NAME

  test-migration:
    name: 'üîç Database migration tests'
    if: ${{ github.event.inputs.test-migration }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Run skills tests - test'
        if: ${{ github.event.inputs.environment == 'test' }}
        env:
          DB_HOST: ${{ vars.DB_TEST_HOST }}
          DB_USER: ${{ vars.DB_TEST_USER }}
          DB_PASS: ${{ secrets.DB_TEST_PASS }}
          DB_NAME: ${{ vars.DB_TEST_NAME }}
          DB_BEFORE_HOST: ${{ vars.DB_DEV_HOST }}
          DB_BEFORE_USER: ${{ vars.DB_DEV_USER }}
          DB_BEFORE_PASS: ${{ secrets.DB_DEV_PASS }}
          DB_BEFORE_NAME: ${{ vars.DB_DEV_NAME }}
        run: |
          php ./Tools/TableFusion/check.php $DB_BEFORE_HOST $DB_BEFORE_USER $DB_BEFORE_PASS $DB_BEFORE_NAME $DB_HOST $DB_USER $DB_PASS $DB_NAME

      - name: 'Run skills tests - prod'
        if: ${{ github.event.inputs.environment == 'prod' }}
        env:
          DB_HOST: ${{ vars.DB_PROD_HOST }}
          DB_USER: ${{ vars.DB_PROD_USER }}
          DB_PASS: ${{ secrets.DB_PROD_PASS }}
          DB_NAME: ${{ vars.DB_PROD_NAME }}
          DB_BEFORE_HOST: ${{ vars.DB_TEST_HOST }}
          DB_BEFORE_USER: ${{ vars.DB_TEST_USER }}
          DB_BEFORE_PASS: ${{ secrets.DB_TEST_PASS }}
          DB_BEFORE_NAME: ${{ vars.DB_TEST_NAME }}
        run: |
          php ./Tools/TableFusion/check.php $DB_BEFORE_HOST $DB_BEFORE_USER $DB_BEFORE_PASS $DB_BEFORE_NAME $DB_HOST $DB_USER $DB_PASS $DB_NAME
        