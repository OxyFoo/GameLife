name: 'GL Prod - Continuous Integration & Delivery'

on:
  pull_request:
    branches:
      - prod

jobs:
  test:
    name: üîç Application tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Cache NPM packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Run tests
        env:
          ENVFILE: .env.test
        run: npm test

      - name: Run ressource tests
        run: cd Tools/RessourcesChecker/ && python3 main.py

  build-android:
    name: üèóÔ∏è Build application ü§ñ
    runs-on: ubuntu-latest
    container: reactnativecommunity/react-native-android
    needs: [ test ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Cache NPM packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Get config files
        run: |
          echo ${{ secrets.KEYSTORE }} | base64 -d > ./keystore
          echo ${{ secrets.APP_JSON }} | base64 -d > ./app.json
          echo ${{ secrets.ANDROID_KEYSTORE }} | base64 -d > ./android/app/gamelife.keystore

      - name: Build app
        env:
          ENVFILE: .env.prod
        run: |
          # Build the app
          npm run build

          # Move aab & mapping files to root
          mv android/app/build/outputs/bundle/release/app-release.aab ./GameLife-prod.aab
          mv android/app/build/outputs/mapping/release/mapping.txt ./GameLife-prod-mapping.txt

      - name: Upload aab artifact
        uses: actions/upload-artifact@v3
        with:
          name: GameLife-prod.aab
          path: GameLife-prod.aab

      - name: Upload mapping artifact
        uses: actions/upload-artifact@v3
        with:
          name: GameLife-prod-mapping.txt
          path: GameLife-prod-mapping.txt

  delivery-android:
    name: üì¶ Continuous Delivery ü§ñ
    runs-on: ubuntu-latest
    needs: [ build-android ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get aab artifact
        uses: actions/download-artifact@v3
        with:
          name: GameLife-prod.aab

      - name: Get mapping artifact
        uses: actions/download-artifact@v3
        with:
          name: GameLife-prod-mapping.txt

      - name: Get google-services.json - firebase-adminsdk secret
        run: |
          echo ${{ secrets.GOOGLE_PLAY_SERVICES_JSON_BASE64 }} | base64 -d > ./google-services.json

      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ./google-services.json
          packageName: com.gamelife
          releaseFiles: GameLife-prod.aab
          track: production
          whatsNewDirectory: distribution/whatsnew
          mappingFile: GameLife-prod-mapping.txt

  build-ios:
    name: üèóÔ∏è Build application üçè
    runs-on: macos-latest
    needs: [ test ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: |
          npm install
          cd ios && pod install

      - name: Get config files
        run: |
          echo ${{ secrets.KEYSTORE }} | base64 -d > ./keystore
          echo ${{ secrets.APP_JSON }} | base64 -d > ./app.json

      - name: Setup & clean build directory
        run: |
          # Specify the keychain for codesign
          security default-keychain -s $RUNNER_TEMP/app-signing.keychain-db

          # Go to the ios directory
          cd ios

          # Clean the build directory
          xcodebuild clean \
            -workspace GameLife.xcworkspace \
            -scheme GameLife \
            -sdk iphoneos \
            -configuration Release \
            -destination 'platform=iOS Simulator,name=iPhone 11,OS=16.2'

      - name: Archive and export app
        run: |
          # Go to the ios directory
          cd ios

          # Archive GameLife
          xcodebuild archive \
            -workspace GameLife.xcworkspace \
            -scheme GameLife \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $PWD/build/GameLife.xcarchive \
            -destination 'platform=iOS Simulator,name=iPhone 11,OS=16.2' \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution: Oxy Foo (54ZUH596XX)" \
            PROVISIONING_PROFILE_SPECIFIER="Game Life Distributed"

          # Export the archived app to an .ipa file
          xcodebuild \
            -exportArchive \
            -archivePath $PWD/build/GameLife.xcarchive \
            -exportOptionsPlist GoogleService-Info.plist \
            -exportPath $PWD/build \
            -destination 'platform=iOS Simulator,name=iPhone 11,OS=16.2' \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution: Oxy Foo (54ZUH596XX)" \
            PROVISIONING_PROFILE_SPECIFIER="Game Life Distributed"

      - name: Upload ipa artifact
        uses: actions/upload-artifact@v3
        with:
          name: GameLife-prod.ipa
          path: ios/build/GameLife.ipa

  delivery-ios:
    name: üì¶ Continuous Delivery üçè
    runs-on: macos-latest
    needs: [ build-ios ]
    steps:
      - name: Upload to App Store
        env:
          APPLE_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_SPECIFIC_PASSWORD }}
        run: |
          # Go to the ios directory
          cd ios/build

          # Upload the .ipa to the App Store using altool
          xcrun altool --upload-app \
            -f GameLife.ipa \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD"

  notify-team-app-published:
    name: üì£ Notify Team - App Published
    runs-on: ubuntu-latest
    needs: [ delivery-android, delivery-ios ]
    steps:
      - name: Send notification to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl \
            -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\":\"üéâ L'application a √©t√© envoy√©e sur le PlayStore et l'AppStore avec succ√®s\"}" \
            $DISCORD_WEBHOOK_URL
