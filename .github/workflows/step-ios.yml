name: '🧩 iOS Build & Delivery'

on:
  push:
    branches:
      - prod
      - dev
      - 'feature/*'
  workflow_call:
    inputs:
      environment:
        description: 'Choose environment to deploy (dev, test, prod)'
        required: false
        type: string
        default: 'prod'
      delivery:
        description: 'Delivery to App Store Connect'
        required: false
        type: boolean
        default: false

env:
  FILE_IPA: GameLife-${{ inputs.environment || 'prod' }}.ipa
  PROVISION_PROFILE_NAME: ${{ (inputs.environment || 'prod') == 'prod' && 'Game Life Distributed' || 'GameLife Test Profile' }}

jobs:
  build:
    name: '🏗️ Build'
    runs-on: macos-latest
    steps:
      - name: '🚧 Check environment availability'
        run: |
          ENVIRONMENT="${{ inputs.environment || 'prod' }}"
          if [ "$ENVIRONMENT" != "prod" ]; then
            echo "🚧 iOS build is currently only available for 'prod' environment"
            echo "   Requested environment: '$ENVIRONMENT'"
            echo "   Skipping iOS build..."
            exit 1
          fi
          echo "✅ Environment '$ENVIRONMENT' is supported for iOS build"

      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.CICD_PAT }}

      - name: 'Install the Apple certificate and provisioning profile'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_PROVISION_PROFILE_BASE64 }}
          PROVISION_PROFILE_TEST_BASE64: ${{ secrets.APPLE_PROVISION_PROFILE_TEST_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          echo "Creating variables in $RUNNER_TEMP"
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          ENVIRONMENT="${{ inputs.environment || 'prod' }}"
          if [ $ENVIRONMENT == 'test' ]; then
            echo -n "$PROVISION_PROFILE_TEST_BASE64" | base64 --decode -o $PP_PATH
            echo "Test environment selected"
          else
            echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
            echo "Production environment selected"
          fi

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Extract and display provisioning profile information...
          echo "📋 Extracting provisioning profile information..."
          
          # Decode provisioning profile to temporary plist file
          PP_PLIST_PATH=$RUNNER_TEMP/profile.plist
          security cms -D -i "$PP_PATH" > "$PP_PLIST_PATH" 2>/dev/null || echo "Failed to decode provisioning profile"
          
          # Extract information from the decoded plist
          if [ -f "$PP_PLIST_PATH" ]; then
            PP_UUID=$(plutil -extract UUID raw "$PP_PLIST_PATH" 2>/dev/null || echo "")
            PP_NAME=$(plutil -extract Name raw "$PP_PLIST_PATH" 2>/dev/null || echo "")
            PP_APP_ID=$(plutil -extract Entitlements.application-identifier raw "$PP_PLIST_PATH" 2>/dev/null || echo "")
            
            # Fallback using PlistBuddy if plutil fails
            if [ -z "$PP_UUID" ]; then
              PP_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$PP_PLIST_PATH" 2>/dev/null || echo "")
            fi
            if [ -z "$PP_NAME" ]; then
              PP_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$PP_PLIST_PATH" 2>/dev/null || echo "")
            fi
            if [ -z "$PP_APP_ID" ]; then
              PP_APP_ID=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$PP_PLIST_PATH" 2>/dev/null || echo "")
            fi
            
            # Copy profile with UUID as filename for better recognition
            if [ -n "$PP_UUID" ]; then
              cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PP_UUID.mobileprovision
              echo "📋 Copied profile with UUID filename: $PP_UUID.mobileprovision"
            fi
          else
            PP_UUID=""
            PP_NAME=""
            PP_APP_ID=""
          fi
          
          echo "Profile UUID: ${PP_UUID:-'not found'}"
          echo "Profile Name: ${PP_NAME:-'not found'}"
          echo "App Identifier: ${PP_APP_ID:-'not found'}"
          
          # Export for Fastlane (only if not empty)
          if [ -n "$PP_UUID" ]; then
            echo "PROVISION_PROFILE_UUID=$PP_UUID" >> $GITHUB_ENV
          fi
          if [ -n "$PP_NAME" ]; then
            echo "PROVISION_PROFILE_NAME_ACTUAL=$PP_NAME" >> $GITHUB_ENV
          fi

          # Set as default keychain for this session
          security default-keychain -s $KEYCHAIN_PATH

          # Export paths for Fastlane (not used anymore but kept for compatibility)
          echo "BUILD_CERTIFICATE_PATH=$CERTIFICATE_PATH" >> $GITHUB_ENV
          echo "PROVISIONING_PROFILE_PATH=$PP_PATH" >> $GITHUB_ENV

          # Debug (simplified)
          echo "🔑 Available signing identities:"
          security find-identity -v -p codesigning
          
          echo "📋 Provisioning profile summary:"
          echo "  Profile Name: ${PP_NAME:-'not found'}"
          echo "  Profile UUID: ${PP_UUID:-'not found'}"
          echo "  App Identifier: ${PP_APP_ID:-'not found'}"

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: 'Install dependencies'
        run: |
          npm install
          cd ios
          # Clean and reinstall pods to ensure proper deployment target configuration
          pod deintegrate || true
          rm -rf Pods Podfile.lock
          pod install --repo-update
          bundle install

      - name: 'Get config files'
        run: |
          echo ${{ secrets.APP_JSON }} | base64 -d > ./app.json

      - name: 'Setup Bundle ID for test environment'
        if: (inputs.environment || 'prod') == 'test'
        run: |
          # Bundle ID management is now handled by Fastlane
          echo "Bundle ID will be managed by Fastlane based on APP_IDENTIFIER environment variable"

      - name: 'Verify iOS deployment targets'
        run: |
          cd ios
          echo "Verifying iOS deployment targets for all pods..."
          # Check main project deployment target
          xcodebuild -showBuildSettings -project GameLife.xcodeproj -target GameLife | grep IPHONEOS_DEPLOYMENT_TARGET
          # Check if there are any pods with incorrect deployment targets
          if [ -f "Pods/Pods.xcodeproj/project.pbxproj" ]; then
            echo "Checking pods deployment targets..."
            grep -n "IPHONEOS_DEPLOYMENT_TARGET" Pods/Pods.xcodeproj/project.pbxproj | head -10
          fi

      - name: 'Build with Fastlane'
        env:
          ENVFILE: .env.${{ inputs.environment || 'prod' }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
          # Public configuration variables
          APP_IDENTIFIER: ${{ (inputs.environment || 'prod') == 'test' && vars.APP_IDENTIFIER_TEST || vars.APP_IDENTIFIER }}
          TEAM_ID: ${{ vars.TEAM_ID }}
          ITC_TEAM_ID: ${{ vars.ITC_TEAM_ID }}
          # Sensitive information only
          APPLE_ID: ${{ secrets.APPLE_ID }}
          # Provisioning profile information
          PROVISION_PROFILE_UUID: ${{ env.PROVISION_PROFILE_UUID }}
          PROVISION_PROFILE_NAME_ACTUAL: ${{ env.PROVISION_PROFILE_NAME_ACTUAL }}
          # Try automatic signing first
          USE_AUTOMATIC_SIGNING: "false"
        run: |
          cd ios
          ENVIRONMENT="${{ inputs.environment || 'prod' }}"
          echo "Building for environment: $ENVIRONMENT"
          if [ -z "$ENVIRONMENT" ]; then
            echo "❌ Environment not specified, using 'dev' as default"
            bundle exec fastlane build environment:dev
          else
            bundle exec fastlane --verbose build environment:$ENVIRONMENT
          fi

      - name: 'Upload ipa artifact'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_IPA }}
          path: ios/build/${{ env.FILE_IPA }}
          if-no-files-found: error

      - name: Dump gym log (tail)
        if: failure()
        run: |
          LG=$(ls -t ~/Library/Logs/gym 2>/dev/null | head -n1 || echo "")
          if [ -n "$LG" ]; then
            echo "=== 📝 $LG ==="
            tail -n 250 ~/Library/Logs/gym/$LG
          else
            echo "No gym log produced"
          fi

  delivery:
    name: '📦 Delivery'
    if: inputs.delivery == true && (inputs.environment || 'prod') == 'prod' # != 'dev'
    runs-on: macos-latest
    needs: build
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: 'Get ipa artifact'
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.FILE_IPA }}
          path: ios/build

      - name: 'Upload to App Store with Fastlane'
        env:
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}  
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          # Public configuration variables
          APP_IDENTIFIER: ${{ (inputs.environment || 'prod') == 'test' && vars.APP_IDENTIFIER_TEST || vars.APP_IDENTIFIER }}
          TEAM_ID: ${{ vars.TEAM_ID }}
          ITC_TEAM_ID: ${{ vars.ITC_TEAM_ID }}
          # Sensitive information only
          APPLE_ID: ${{ secrets.APPLE_ID }}
        run: |
          cd ios
          bundle install
          bundle exec fastlane upload_to_appstore environment:${{ inputs.environment || 'prod' }}
