name: 'GL Prod - Continuous Delivery'

on:
  workflow_dispatch:
    inputs:
      actions:
        description: 'Choose platform to build'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - android
        - ios
      delivery:
        description: 'Delivery to stores'
        required: true
        default: false
        type: boolean
      apk-artifact:
        description: 'Download apk artifact (only for android)'
        required: false
        default: false
        type: boolean

jobs:
  test-client:
    name: 'üîç Application tests'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: 'Cache NPM packages'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: 'Install Dependencies'
        run: npm install

      - name: 'Run tests'
        env:
          ENVFILE: .env.test
        run: npm test

      - name: 'Run ressource tests'
        run: cd Tools/RessourcesChecker/ && python3 main.py

  test-server:
    name: 'üîç Server tests'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Run skills tests'
        run: |
          php ./Tools/RessourcesChecker/skills.php \
          '${{ vars.DB_TEST_HOST }}' \
          '${{ vars.DB_TEST_USER }}' \
          '${{ secrets.DB_TEST_PASS }}' \
          '${{ vars.DB_TEST_NAME }}'

  build-android:
    name: 'üèóÔ∏è Build application ü§ñ'
    if: github.event.inputs.actions == 'both' || github.event.inputs.actions == 'android'
    runs-on: ubuntu-latest
    container: reactnativecommunity/react-native-android
    needs: [ test-client, test-server ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: 'Cache NPM packages'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: 'Install Dependencies'
        run: npm install

      - name: 'Get config files'
        run: |
          echo ${{ secrets.KEYSTORE }} | base64 -d > ./keystore
          echo ${{ secrets.APP_JSON }} | base64 -d > ./app.json
          echo ${{ secrets.ANDROID_KEYSTORE }} | base64 -d > ./android/app/gamelife.keystore

      - name: 'Build app'
        env:
          ENVFILE: .env.prod
        run: |
          # Build the app
          npm run build

          # Move aab & mapping files to root
          mv android/app/build/outputs/bundle/release/app-release.aab ./GameLife-prod.aab
          mv android/app/build/outputs/mapping/release/mapping.txt ./GameLife-prod-mapping.txt

      - name: 'Upload aab artifact'
        uses: actions/upload-artifact@v3
        with:
          name: GameLife-prod.aab
          path: GameLife-prod.aab

      - name: 'Upload mapping artifact'
        uses: actions/upload-artifact@v3
        with:
          name: GameLife-prod-mapping.txt
          path: GameLife-prod-mapping.txt

      - name: 'Download buildtool'
        if: ${{ github.event.inputs.apk-artifact }}
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget -O bundletool.jar https://github.com/google/bundletool/releases/download/1.15.0/bundletool-all-1.15.0.jar

      - name: 'Generate universal APK'
        if: ${{ github.event.inputs.apk-artifact }}
        run: |
          java -jar ./bundletool.jar build-apks \
            --bundle=GameLife-prod.aab \
            --output=my_app.apks \
            --mode=universal \
            --ks=./android/app/gamelife.keystore \
            --ks-key-alias=gameLifeAlias \
            --ks-pass=file:./keystore
          unzip -p my_app.apks universal.apk > GameLife-test.apk

      - name: 'Upload apk artifact'
        if: ${{ github.event.inputs.apk-artifact }}
        uses: actions/upload-artifact@v3
        with:
          name: GameLife-test.apk
          path: GameLife-test.apk

  delivery-android:
    name: 'üì¶ Continuous Delivery ü§ñ'
    if: (github.event.inputs.actions == 'both' || github.event.inputs.actions == 'android') && github.event.inputs.delivery == true
    runs-on: ubuntu-latest
    needs: build-android
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Get aab artifact'
        uses: actions/download-artifact@v3
        with:
          name: GameLife-prod.aab

      - name: 'Get mapping artifact'
        uses: actions/download-artifact@v3
        with:
          name: GameLife-prod-mapping.txt

      - name: 'Get google-services.json - firebase-adminsdk secret'
        run: |
          echo ${{ secrets.GOOGLE_PLAY_SERVICES_JSON_BASE64 }} | base64 -d > ./google-services.json

      - name: 'Upload to Google Play'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ./google-services.json
          packageName: com.gamelife
          releaseFiles: GameLife-prod.aab
          track: production
          whatsNewDirectory: distribution/whatsnew
          mappingFile: GameLife-prod-mapping.txt

  build-ios:
    name: 'üèóÔ∏è Build application üçè'
    if: github.event.inputs.actions == 'both' || github.event.inputs.actions == 'ios'
    runs-on: macos-latest
    needs: [ test-client, test-server ]
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Install the Apple certificate and provisioning profile'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: 'Install dependencies'
        run: |
          npm install
          cd ios && pod install

      - name: 'Get config files'
        run: |
          echo ${{ secrets.KEYSTORE }} | base64 -d > ./keystore
          echo ${{ secrets.APP_JSON }} | base64 -d > ./app.json

      - name: 'Setup & clean build directory'
        run: |
          # Go to the ios directory
          cd ios

          # Clean the build directory
          xcodebuild clean \
            -workspace GameLife.xcworkspace \
            -scheme GameLife \
            -sdk iphoneos \
            -configuration Release \
            -destination 'platform=iOS Simulator,name=iPhone 11,OS=16.2'

      - name: 'Archive app'
        env:
          ENVFILE: .env.prod
          KEYCHAIN_PATH: $RUNNER_TEMP/app-signing.keychain-db
        run: |
          # Specify the keychain for codesign
          security default-keychain -s $RUNNER_TEMP/app-signing.keychain-db

          # Go to the ios directory
          cd ios

          # Archive GameLife
          xcodebuild archive \
            -workspace GameLife.xcworkspace \
            -scheme GameLife \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $PWD/build/GameLife.xcarchive \
            -destination 'platform=iOS Simulator,name=iPhone 11,OS=16.2' \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution: Oxy Foo (54ZUH596XX)" \
            PROVISIONING_PROFILE_SPECIFIER="Game Life Distributed"

      - name: 'Export app to ipa'
        env:
          KEYCHAIN_PATH: $RUNNER_TEMP/app-signing.keychain-db
        run: |
          # Go to the ios directory
          cd ios

          # Export the archived app to an .ipa file
          xcodebuild \
            -exportArchive \
            -archivePath $PWD/build/GameLife.xcarchive \
            -exportOptionsPlist GoogleService-Info.plist \
            -exportPath $PWD/build \
            -destination 'platform=iOS Simulator,name=iPhone 11,OS=16.2' \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution: Oxy Foo (54ZUH596XX)" \
            PROVISIONING_PROFILE_SPECIFIER="Game Life Distributed"

      - name: 'Upload ipa artifact'
        uses: actions/upload-artifact@v3
        with:
          name: GameLife-prod.ipa
          path: ios/build/GameLife.ipa

  delivery-ios:
    name: 'üì¶ Continuous Delivery üçè'
    if: (github.event.inputs.actions == 'both' || github.event.inputs.actions == 'ios') && github.event.inputs.delivery == true
    runs-on: macos-latest
    needs: build-ios
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Get ipa artifact'
        uses: actions/download-artifact@v3
        with:
          name: GameLife-prod.ipa
          path: ios/build

      - name: 'Setup API App Store Connect'
        env:
          KEY_PATH: ios/build/private_keys
          SEND_KEY: ${{ secrets.APPLE_API_APP_STORE_CONNECT_SEND_KEY }}
          KEY_CONTENT: ${{ secrets.APPLE_API_APP_STORE_CONNECT_AUTH_KEY }}
        run: |
          # Create directory
          mkdir -p $KEY_PATH

          # Go to the ios directory
          cd $KEY_PATH

          # Get key name (AuthKey_$SEND_KEY.p8)
          KEY_NAME="AuthKey_$SEND_KEY.p8"

          # Import key from secrets
          echo -n "$KEY_CONTENT" | base64 --decode > $KEY_NAME

          # Go back
          cd -

          # Print current directory
          pwd

          # Check if key is valid
          ls -l $KEY_PATH/$KEY_NAME

      - name: 'Upload to App Store'
        env:
          ISSUER_ID: ${{ secrets.APPLE_API_APP_STORE_CONNECT_ISSUER_ID }}
          SEND_KEY: ${{ secrets.APPLE_API_APP_STORE_CONNECT_SEND_KEY }}
        run: |
          # Go to the ios directory
          cd ios/build

          # Upload the .ipa to the App Store using altool
          xcrun altool --upload-app \
            -f GameLife.ipa \
            -t ios \
            --apiKey "$SEND_KEY" \
            --apiIssuer "$ISSUER_ID" \
            --verbose

          # Check if upload was successful
          if [ $? -eq 0 ]; then
            echo "::set-output name=upload-success::true"
            echo "Upload successful, state saved"
          else
            echo "Upload failed"
            exit 1
          fi

  enable-test-account:
    name: 'üîë Enable test account'
    if: success() || failure()
    runs-on: ubuntu-latest
    needs: [ delivery-android, delivery-ios ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Enable test account'
        run: |
          php ./Tools/Maintenance/setTestAccount.php \
          '${{ vars.DB_PROD_HOST }}' \
          '${{ vars.DB_PROD_USER }}' \
          '${{ secrets.DB_PROD_PASS }}' \
          '${{ vars.DB_PROD_NAME }}' \
          1

  notify:
    name: 'üì£ App Published'
    runs-on: ubuntu-latest
    needs: enable-test-account
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Get app version'
        run: |
          GL_VERSION=$( \
            php ./Tools/Maintenance/getVersion.php \
            '${{ vars.DB_TEST_HOST }}' \
            '${{ vars.DB_TEST_USER }}' \
            '${{ secrets.DB_TEST_PASS }}' \
            '${{ vars.DB_TEST_NAME }}' \
          )

          echo "Version: $GL_VERSION"
          echo "GL_VERSION=$GL_VERSION" >> $GITHUB_ENV

          # Get delivery status (steps: delivery-ios: outputs: upload-success)
          echo "DELIVERY_IOS=$DELIVERY_IOS" >> $GITHUB_ENV

      - name: 'Send notification to Discord'
        env:
          GL_VERSION: ${{ env.GL_VERSION }}
          NEXT_WORKFLOW_URL: 'https://github.com/OxyFoo/GameLife/actions/workflows/prod-deploy.yml'
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl \
            -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\":\"GameLife v$GL_VERSION a √©t√© envoy√©e sur le PlayStore ü§ñ avec succ√®s üéâ\n\nPour la valider: <$NEXT_WORKFLOW_URL>\"}" \
            $DISCORD_WEBHOOK_URL
