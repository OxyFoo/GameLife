name: '🧩 iOS build & delivery'

on:
  workflow_call:
    inputs:
      environment:
        description: 'Choose environment to deploy (dev, test, prod)'
        required: true
        type: string
      delivery:
        description: 'Delivery to App Store Connect'
        required: true
        type: boolean

env:
  FILE_IPA: GameLife-${{ inputs.environment }}.ipa
  PROVISION_PROFILE_NAME: ${{ inputs.environment == 'prod' && 'Game Life Distributed' || 'GameLife Test Profile' }}

jobs:
  build:
    name: '🏗️ Build'
    runs-on: macos-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          persist-credentials: true
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: 'Install the Apple certificate and provisioning profile'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_PROVISION_PROFILE_BASE64 }}
          PROVISION_PROFILE_TEST_BASE64: ${{ secrets.APPLE_PROVISION_PROFILE_TEST_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          echo "Creating variables in $RUNNER_TEMP"
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          if [ ${{ inputs.environment }} == 'test' ]; then
            echo -n "$PROVISION_PROFILE_TEST_BASE64" | base64 --decode -o $PP_PATH
            echo "Test environment selected"
          else
            echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
            echo "Production environment selected"
          fi

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          # List keychains and provisioning profiles
          security list-keychains
          security find-identity -v -p codesigning
          security find-certificate -a -c "Apple Distribution: Oxy Foo (54ZUH596XX)"
          ls ~/Library/MobileDevice/Provisioning\ Profiles

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: 'Install dependencies'
        run: |
          npm install
          cd ios && pod install

      - name: 'Get config files'
        run: |
          echo ${{ secrets.KEYSTORE }} | base64 -d > ./keystore
          echo ${{ secrets.APP_JSON }} | base64 -d > ./app.json

      - name: 'Setup & clean build directory'
        run: |
          # Generate type files
          npm run prestart

          # Go to the ios directory
          cd ios

          # Clean the build directory
          xcodebuild clean \
            -workspace GameLife.xcworkspace \
            -scheme GameLife \
            -sdk iphoneos \
            -configuration Release

      - name: 'Archive app'
        env:
          ENVFILE: .env.${{ inputs.environment }}
          KEYCHAIN_PATH: $RUNNER_TEMP/app-signing.keychain-db
        run: |
          # Specify the keychain for codesign
          security default-keychain -s $RUNNER_TEMP/app-signing.keychain-db

          # Execute bundleSwitcher.sh if environment is test
          if [ ${{ inputs.environment }} == 'test' ]; then
            chmod +x ./Tools/BundleIdSwitcher/bundleIdSwitcher.sh
            ./Tools/BundleIdSwitcher/bundleIdSwitcher.sh test
          fi

          # Go to the ios directory
          cd ios

          # Archive GameLife
          xcodebuild archive \
            -workspace GameLife.xcworkspace \
            -scheme GameLife \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $PWD/build/GameLife.xcarchive \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution: Oxy Foo (54ZUH596XX)" \
            PROVISIONING_PROFILE_SPECIFIER="${{ env.PROVISION_PROFILE_NAME }}"

      - name: 'Export app to ipa'
        env:
          KEYCHAIN_PATH: $RUNNER_TEMP/app-signing.keychain-db
        run: |
          # Specify the keychain for codesign
          security default-keychain -s $RUNNER_TEMP/app-signing.keychain-db

          # Go to the ios directory
          cd ios

          # Export the archived app to an .ipa file
          xcodebuild \
            -exportArchive \
            -sdk iphoneos \
            -allowProvisioningUpdates \
            -archivePath $PWD/build/GameLife.xcarchive \
            -exportOptionsPlist GoogleService-Info.plist \
            -exportPath $PWD/build \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution: Oxy Foo (54ZUH596XX)" \
            PROVISIONING_PROFILE_SPECIFIER="${{ env.PROVISION_PROFILE_NAME }}"

          # Rename ipa
          if [ ${{ inputs.environment }} == 'test' ]; then
            mv $PWD/build/GameLife.test.ipa $PWD/build/${{ env.FILE_IPA }}
          else
            mv $PWD/build/GameLife.ipa $PWD/build/${{ env.FILE_IPA }}
          fi

      - name: 'Upload ipa artifact'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_IPA }}
          path: ios/build/${{ env.FILE_IPA }}
          if-no-files-found: error

  delivery:
    name: '📦 Delivery'
    if: inputs.delivery == true && inputs.environment != 'dev'
    runs-on: macos-latest
    needs: build
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          persist-credentials: true
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: 'Get ipa artifact'
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.FILE_IPA }}
          path: ios/build

      - name: 'Setup API App Store Connect'
        env:
          KEY_PATH: ios/build/private_keys
          SEND_KEY: ${{ secrets.APPLE_API_APP_STORE_CONNECT_SEND_KEY }}
          KEY_CONTENT: ${{ secrets.APPLE_API_APP_STORE_CONNECT_AUTH_KEY }}
        run: |
          # Create directory
          mkdir -p $KEY_PATH

          # Go to the ios directory
          cd $KEY_PATH

          # Get key name (AuthKey_$SEND_KEY.p8)
          KEY_NAME="AuthKey_$SEND_KEY.p8"

          # Import key from secrets
          echo -n "$KEY_CONTENT" | base64 --decode > $KEY_NAME

          # Go back
          cd -

      - name: 'Upload to App Store'
        env:
          ISSUER_ID: ${{ secrets.APPLE_API_APP_STORE_CONNECT_ISSUER_ID }}
          SEND_KEY: ${{ secrets.APPLE_API_APP_STORE_CONNECT_SEND_KEY }}
        run: |
          # Go to the ios directory
          cd ios/build

          # Upload the .ipa to the App Store using altool
          xcrun altool --upload-app \
            -f ${FILE_IPA} \
            -t ios \
            --apiKey "$SEND_KEY" \
            --apiIssuer "$ISSUER_ID" \
            --verbose

          # Check if upload was successful
          if [ $? -eq 0 ]; then
            echo "APPSTORE_STATUS=success" >> $GITHUB_ENV
            echo "Upload successful, state saved"
          else
            echo "APPSTORE_STATUS=failure" >> $GITHUB_ENV
            echo "Upload failed"
            exit 1
          fi
