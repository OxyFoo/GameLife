name: 'GL Prod - Continuous Deployment'

on:
  workflow_dispatch:
    inputs:
      actions:
        description: 'Choose actions to do'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - deploy
        - migration

jobs:
  enable-maintenance:
    name: 'ðŸš§ Enable Maintenance'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Enable maintenance mode - test'
        run: |
          php ./Tools/Maintenance/setMaintenance.php \
            '${{ vars.DB_TEST_HOST }}' \
            '${{ vars.DB_TEST_USER }}' \
            '${{ secrets.DB_TEST_PASS }}' \
            '${{ vars.DB_TEST_NAME }}' \
            1

      - name: 'Enable maintenance mode - prod'
        run: |
          php ./Tools/Maintenance/setMaintenance.php \
            '${{ vars.DB_PROD_HOST }}' \
            '${{ vars.DB_PROD_USER }}' \
            '${{ secrets.DB_PROD_PASS }}' \
            '${{ vars.DB_PROD_NAME }}' \
            1

  deploy:
    name: 'ðŸš€ Deploy Server side'
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.actions == 'both' || github.event.inputs.actions == 'deploy' }}
    needs: enable-maintenance
    env:
      ARCHIVE: archive_code_$(date +'%Y-%m-%d_%H-%M-%S').tar.gz
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install FTP client'
        run: sudo apt-get update && sudo apt-get install lftp tar -y

      - name: 'Create temporary directory'
        run: mkdir -p ftp_backup

      - name: 'Download files from FTP prod server'
        run: |
          lftp -c "set ftp:ssl-allow true; set ssl:verify-certificate no;
          open -u ${{ secrets.FTP_PROD_USER }},${{ secrets.FTP_PROD_PASS }} ${{ secrets.FTP_PROD_HOST }};
          mirror --exclude=backups/ / ftp_backup/"

      - name: 'Archive downloaded files'
        run: tar -czf ${{ env.ARCHIVE }} -C ftp_backup .

      - name: 'Upload archive to FTP prod server'
        run: |
          lftp -c "set ftp:ssl-allow true; set ssl:verify-certificate no;
          open -u ${{ secrets.FTP_PROD_USER }},${{ secrets.FTP_PROD_PASS }} ${{ secrets.FTP_PROD_HOST }};
          put -O ./backups/ ${{ env.ARCHIVE }}"

      - name: 'Upload files to FTP prod server'
        run: |
          lftp -c "set ftp:ssl-allow true; set ssl:verify-certificate no;
          open -u ${{ secrets.FTP_PROD_USER }},${{ secrets.FTP_PROD_PASS }} ${{ secrets.FTP_PROD_HOST }};
          mirror --reverse ./src/Server/HTTP/ /"

  migration:
    name: 'ðŸšš Database migration'
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.actions == 'both' || github.event.inputs.actions == 'migration' }}
    needs: enable-maintenance
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Run migration - prod'
        run: |
          php ./Tools/TableFusion/index.php \
          '${{ vars.DB_TEST_HOST }}' \
          '${{ vars.DB_TEST_USER }}' \
          '${{ secrets.DB_TEST_PASS }}' \
          '${{ vars.DB_TEST_NAME }}' \
          '${{ vars.DB_PROD_HOST }}' \
          '${{ vars.DB_PROD_USER }}' \
          '${{ secrets.DB_PROD_PASS }}' \
          '${{ vars.DB_PROD_NAME }}' \
          --no-confirm

  disable-maintenance:
    name: 'ðŸš§ Disable Maintenance'
    runs-on: ubuntu-latest
    needs: [ deploy, migration ]
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Disable maintenance mode - test'
        run: |
          php ./Tools/Maintenance/setMaintenance.php \
            '${{ vars.DB_TEST_HOST }}' \
            '${{ vars.DB_TEST_USER }}' \
            '${{ secrets.DB_TEST_PASS }}' \
            '${{ vars.DB_TEST_NAME }}' \
            0

      - name: 'Disable maintenance mode - prod'
        run: |
          php ./Tools/Maintenance/setMaintenance.php \
            '${{ vars.DB_PROD_HOST }}' \
            '${{ vars.DB_PROD_USER }}' \
            '${{ secrets.DB_PROD_PASS }}' \
            '${{ vars.DB_PROD_NAME }}' \
            0

  disable-test-account:
    name: 'ðŸ”‘ Disable test account'
    runs-on: ubuntu-latest
    needs: [ deploy, migration ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Enable test account'
        run: |
          php ./Tools/Maintenance/setTestAccount.php \
          '${{ vars.DB_PROD_HOST }}' \
          '${{ vars.DB_PROD_USER }}' \
          '${{ secrets.DB_PROD_PASS }}' \
          '${{ vars.DB_PROD_NAME }}' \
          0

  notify-team-app-published:
    name: 'ðŸ“£ Notify Team - App Published'
    runs-on: ubuntu-latest
    needs: [ disable-maintenance, disable-test-account ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Install PHP with mysqli extension'
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: 'Get app version'
        run: |
          GL_VERSION=$( \
            php ./Tools/Maintenance/getVersion.php \
            '${{ vars.DB_TEST_HOST }}' \
            '${{ vars.DB_TEST_USER }}' \
            '${{ secrets.DB_TEST_PASS }}' \
            '${{ vars.DB_TEST_NAME }}' \
          )

          echo "Version: $GL_VERSION"
          echo "GL_VERSION=$GL_VERSION" >> $GITHUB_ENV

      - name: 'Send notification to Discord'
        env:
          GL_VERSION: ${{ env.GL_VERSION }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl \
            -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\":\"ðŸŽ‰ GameLife v$GL_VERSION a Ã©tÃ© envoyÃ©e sur le PlayStore et l'AppStore avec succÃ¨s\"}" \
            $DISCORD_WEBHOOK_URL
