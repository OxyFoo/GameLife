name: GameLife - Continuous Deployment

on:
  workflow_dispatch:
    inputs:
      actions:
        description: 'Choose actions to do'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - deploy
        - migration

jobs:
  deploy:
    name: ðŸš€ Deploy Server side
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.actions == 'both' || github.event.inputs.actions == 'deploy' }}
    env:
      ARCHIVE: archive_code_$(date +'%Y-%m-%d_%H-%M-%S').tar.gz
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install FTP client
        run: sudo apt-get update && sudo apt-get install lftp tar -y

      - name: Create temporary directory
        run: mkdir -p ftp_backup

      - name: Download files from FTP prod server
        run: |
          lftp -c "set ftp:ssl-allow true; set ssl:verify-certificate no;
          open -u ${{ secrets.FTP_PROD_USER }},${{ secrets.FTP_PROD_PASS }} ${{ secrets.FTP_PROD_HOST }};
          mirror --exclude=backups/ / ftp_backup/"

      - name: Archive downloaded files
        run: tar -czf ${{ env.ARCHIVE }} -C ftp_backup .

      - name: Upload archive to FTP prod server
        run: |
          lftp -c "set ftp:ssl-allow true; set ssl:verify-certificate no;
          open -u ${{ secrets.FTP_PROD_USER }},${{ secrets.FTP_PROD_PASS }} ${{ secrets.FTP_PROD_HOST }};
          put -O ./backups/ ${{ env.ARCHIVE }}"

      - name: Upload files to FTP prod server
        run: |
          lftp -c "set ftp:ssl-allow true; set ssl:verify-certificate no;
          open -u ${{ secrets.FTP_PROD_USER }},${{ secrets.FTP_PROD_PASS }} ${{ secrets.FTP_PROD_HOST }};
          mirror --reverse ./src/Server/HTTP/ /"

  migration:
    name: ðŸšš Database migration
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.actions == 'both' || github.event.inputs.actions == 'migration' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PHP with mysqli extension
        run: sudo apt-get update && sudo apt-get install php php-mysqli -y

      - name: Run migration - prod
        if: ${{ github.base_ref == 'prod' }}
        run: |
          php ./Tools/TableFusion/index.php \
          '${{ vars.DB_TEST_HOST }}' \
          '${{ vars.DB_TEST_USER }}' \
          '${{ secrets.DB_TEST_PASS }}' \
          '${{ vars.DB_TEST_NAME }}' \
          '${{ vars.DB_PROD_HOST }}' \
          '${{ vars.DB_PROD_USER }}' \
          '${{ secrets.DB_PROD_PASS }}' \
          '${{ vars.DB_PROD_NAME }}' \
          --no-confirm
